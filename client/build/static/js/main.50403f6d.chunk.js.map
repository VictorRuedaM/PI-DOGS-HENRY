{"version":3,"sources":["components/LandingPage/LandingPage.jsx","actions/actionsExports.js","actions/index.actions.js","components/Card/Card.jsx","components/Paged/Paged.jsx","components/HomePage/HomePage.jsx","App.js","reportWebVitals.js","reducer/index.reducer.js","store/index.js","index.js"],"names":["LandingPage","to","GET_ALL_DOGS","getAllDogs","dispatch","a","axios","get","dogs","type","payload","data","Card","props","image","name","temperament","weight","src","alt","width","height","Paginated","dogsPerPage","allDogs","paginated","currentPage","numberOfPage","i","Math","ceil","push","className","style","container","map","n","number","crumb_active","crumb","href","onClick","Home","useDispatch","useSelector","state","useState","SetCurrentPage","indexOfLastDog","indexOfFirstDog","currentDogs","slice","useEffect","e","preventDefault","buttonClick","value","defaultValue","length","pageNum","Array","isArray","temperaments","arr","forEach","toString","App","path","exat","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50403f6d.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from 'react-router-dom';\n\n\n\nexport default function LandingPage(){\n\n    return(\n\n        <div>\n            <h1>Welcome To Canine Atlas</h1>\n            <Link to={'/home'}>\n                <button>Start</button>\n            </Link>\n        </div>\n    )\n}","export const GET_ALL_DOGS = 'GET_ALL_DOGS';\nexport const CREATE_HOUSE = 'CREATE_HOUSE';\nexport const GET_HOUSE = 'GET_HOUSE';\nexport const DELETE_HOUSE = 'DELETE_HOUSE';","import axios from 'axios';\nimport {GET_ALL_DOGS} from './actionsExports';\n\n\n\nexport function getAllDogs(){\n\n    return async (dispatch) => {\n\n        let dogs = await axios.get('http://localhost:3001/dogs');\n        // console.log(dogs.data)\n        return dispatch({\n            type: GET_ALL_DOGS,\n            payload: dogs.data\n        })\n    }\n  \n};","import React from \"react\";\n\nexport default function Card(props){\n\n    const {image, name, temperament, weight} = props;\n\n    \n\n    return(\n\n        \n        <div>\n            <img src={image} alt=\"Dog\" width='200px' height='200px' />\n            <h2>{name}</h2>\n            <h4>Weight: {weight} Kg.</h4>\n            <h4>Temperaments: {temperament}</h4>\n            <hr />\n            <br/>\n        </div>\n    );\n\n}","import React from \"react\";\nimport style from './Paged.css';\n\n\n\n\nexport default function Paginated({dogsPerPage, allDogs, paginated, currentPage}){\n\n    const numberOfPage = [];\n\n    for(let i = 1; i <= Math.ceil(allDogs / dogsPerPage); i++){\n\n        numberOfPage.push(i);\n    };\n\n    return (\n\n        <nav>\n            <ul className={style.container}>\n                {\n                    numberOfPage && numberOfPage.map(n => (\n                            <li key={n} className={style.number}>\n                                \n                                <div className={currentPage === n ? style.crumb_active : style.crumb}href=\"#\" onClick={() => paginated(n)} >{n}</div>\n                            </li>\n                    ))\n                    \n                }\n            </ul>\n        </nav>\n    )\n}","import React from \"react\";\nimport {useState, useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getAllDogs} from '../../actions/index.actions';\nimport {Link} from 'react-router-dom';\nimport Card  from \"../Card/Card\";\nimport Paginated from '../Paged/Paged';\n\nexport default function Home(){\n\n    const dispatch = useDispatch();\n\n    const allDogs = useSelector((state) => state.dogs);\n\n\n\n    // Paginado de la aplicaciÃ³n.\n\n    const [currentPage, SetCurrentPage] = useState(1);\n    const [dogsPerPage, setDogsPerPage] = useState(8);\n    const indexOfLastDog = currentPage * dogsPerPage;\n    const indexOfFirstDog = indexOfLastDog - dogsPerPage;\n    const currentDogs = allDogs.slice(indexOfFirstDog, indexOfLastDog);\n\n    const paginated = (pageNum) => {\n        SetCurrentPage(pageNum);\n    }\n\n    // console.log('AAAAAA',allDogs)\n    // se cargan por primera vez los datos con el metodo useEffect llamando a la action getAllDogs\n    useEffect(() => {\n        dispatch(getAllDogs());\n    },[]);\n\n\n    // Funcion para recargar los datos de la pagina \n    function buttonClick(e){\n\n        e.preventDefault();\n        dispatch(getAllDogs());\n    }\n\n    return(\n\n        <div>\n            <Link to={'/createDog'}>\n                Create Breed\n            </Link>\n\n            <h1>Canine Atlas    </h1>\n\n            <button onClick={e => buttonClick(e)}>Load Breeds</button>\n\n            <div>\n\n                {/* Filtrado por por raza creada o de la api */}\n                <select>\n                    \n                    <option value={'all'}>All Breeds</option>\n                    <option value={'breedDB'}>Breeds Created</option>\n\n                </select>\n            </div>\n\n            <div>\n                {/* Filtrado alfabetico */}\n                <select>\n                    <option defaultValue={'all'}>Name</option>\n                    <option value={'asc'}>Ascendingly</option>\n                    <option value={'desc'}>Descendingly</option>\n                </select>\n            </div>\n\n            <div>\n                {/* Filtrado por peso */}\n                <select>\n                    <option defaultValue={'all'}>Weight</option>\n                    <option value={'asc'}>High Weight</option>\n                    <option value={'desc'}>low Weight</option>\n                </select>\n                \n            </div>\n            <br />\n\n            {/* Paginado */}\n            <Paginated\n                dogsPerPage={dogsPerPage}\n                allDogs={allDogs.length}\n                paginated={paginated}\n                currentPage={currentPage}\n            />\n            <br />\n            {\n                // Mapear el resultado que llega de state\n                currentDogs && currentDogs.map(e => {\n                    \n                    // Los temperamentos de los dogs creados hay que pasalos de array de objetos a string\n                    // para que se puedan visualizar en la pagina\n                    if(Array.isArray(e.temperaments)){\n                        \n                        let arr = [];\n\n                        e.temperaments.forEach(e => {\n                            arr.push(' '+e.name);\n                        });\n\n                        e.temperament = arr.toString()\n                        \n                    }\n                    return(\n                        // Se le pasa la data a el componente Card \n                        <div>\n                            <Card \n                                image={e.image} \n                                name={e.name}\n                                weight={e.weight}\n                                temperament={e.temperament}\n                            />\n                         </div>\n                    )\n                })\n   \n            }\n\n        </div>\n    )\n}\n","import './App.css';\nimport {Route, Routes} from 'react-router-dom'\nimport LandingPage from './components/LandingPage/LandingPage.jsx';\nimport HomePage from './components/HomePage/HomePage.jsx';\n\n\nfunction App() {\n  return (\n    \n    <div className=\"App\">\n      <Routes>\n        <Route path={'/'} exat element={<LandingPage/>}/>\n          \n       \n\n        <Route path={'/home'} element={<HomePage/>}/>\n          \n       \n      </Routes>\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {GET_ALL_DOGS} from '../actions/actionsExports';\n\n\nconst initialState = {\n\n    dogs : [],\n};\n\nconst rootReducer = (state= initialState, action) => {\n\n    switch(action.type){\n\n        case GET_ALL_DOGS:\n            \n            return{\n                ...state,\n                dogs: action.payload\n                \n            }\n\n        default:\n            return{\n                ...state\n            }\n    }\n\n};\n\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducer/index.reducer';\n\n\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom'\nimport {Provider} from 'react-redux';\nimport {store} from './store/index';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n     \n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}